var context_1 = require("./context");
var Injector = (function () {
    function Injector() {
        var _this = this;
        this.context = new context_1["default"]();
        this.Service = (function (target) {
            _this.getContext().register(target.service_name, function () { return new target(); });
            return target;
        }).bind(this);
        this.Inject = (function (runtime_id) {
            return function (target, key) {
                Object.defineProperty(target, key, {
                    get: function () {
                        return _this.getContext().resolve(runtime_id);
                    },
                    set: function () {
                        throw new Error("Cannot set injected field \"" + key + "\"");
                    }
                });
            };
        }).bind(this);
    }
    Injector.prototype.getContext = function () {
        return this.context;
    };
    Injector.prototype.createTestContext = function () {
        this.old_context = this.context;
        this.context = this.context.clone();
    };
    Injector.prototype.clearTestContext = function () {
        this.context = this.old_context;
    };
    return Injector;
})();
exports.__esModule = true;
exports["default"] = Injector;
function isString(s) {
    return typeof s === 'string';
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluamVjdG9yLnRzIl0sIm5hbWVzIjpbIkluamVjdG9yIiwiSW5qZWN0b3IuY29uc3RydWN0b3IiLCJJbmplY3Rvci5nZXRDb250ZXh0IiwiSW5qZWN0b3IuY3JlYXRlVGVzdENvbnRleHQiLCJJbmplY3Rvci5jbGVhclRlc3RDb250ZXh0IiwiaXNTdHJpbmciXSwibWFwcGluZ3MiOiJBQUFBLHdCQUFvQixXQUFXLENBQUMsQ0FBQTtBQVFoQztJQUNFQTtRQURGQyxpQkFzRENBO1FBSFNBLFlBQU9BLEdBQWFBLElBQUlBLG9CQUFPQSxFQUFFQSxDQUFDQTtRQWpEeENBLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLENBQUNBLFVBQUNBLE1BQTJCQTtZQUMxQ0EsS0FBSUEsQ0FBQ0EsVUFBVUEsRUFBRUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsWUFBWUEsRUFBRUEsY0FBSUEsT0FBQUEsSUFBSUEsTUFBTUEsRUFBRUEsRUFBWkEsQ0FBWUEsQ0FBQ0EsQ0FBQ0E7WUFFbEVBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBO1FBQ2hCQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUVkQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxDQUFDQSxVQUFDQSxVQUFrQkE7WUFDaENBLE1BQU1BLENBQUNBLFVBQUNBLE1BQVdBLEVBQUVBLEdBQVdBO2dCQUM5QkEsTUFBTUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsTUFBTUEsRUFBRUEsR0FBR0EsRUFBRUE7b0JBQ2pDQSxHQUFHQSxFQUFFQTt3QkFDSEEsTUFBTUEsQ0FBQ0EsS0FBSUEsQ0FBQ0EsVUFBVUEsRUFBRUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0E7b0JBQy9DQSxDQUFDQTtvQkFDREEsR0FBR0EsRUFBRUE7d0JBQ0hBLE1BQU1BLElBQUlBLEtBQUtBLENBQUNBLGlDQUE4QkEsR0FBR0EsT0FBR0EsQ0FBQ0EsQ0FBQUE7b0JBQ3ZEQSxDQUFDQTtpQkFDRkEsQ0FBQ0EsQ0FBQ0E7WUFDTEEsQ0FBQ0EsQ0FBQUE7UUFDSEEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7SUFFaEJBLENBQUNBO0lBaUJNRCw2QkFBVUEsR0FBakJBO1FBQ0VFLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBO0lBQ3RCQSxDQUFDQTtJQUVNRixvQ0FBaUJBLEdBQXhCQTtRQUNFRyxJQUFJQSxDQUFDQSxXQUFXQSxHQUFHQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQTtRQUNoQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0E7SUFDdENBLENBQUNBO0lBRU1ILG1DQUFnQkEsR0FBdkJBO1FBQ0VJLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBO0lBQ2xDQSxDQUFDQTtJQUtISixlQUFDQTtBQUFEQSxDQXREQSxBQXNEQ0EsSUFBQTtBQXRERDs2QkFzREMsQ0FBQTtBQUdELGtCQUFrQixDQUFDO0lBQ2pCSyxNQUFNQSxDQUFDQSxPQUFPQSxDQUFDQSxLQUFLQSxRQUFRQSxDQUFDQTtBQUMvQkEsQ0FBQ0EiLCJmaWxlIjoiaW5qZWN0b3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ29udGV4dCBmcm9tIFwiLi9jb250ZXh0XCI7XG5pbXBvcnQge0lDb250ZXh0fSBmcm9tIFwiLi9jb250ZXh0XCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVNlcnZpY2VDb25zdHJ1Y3RvciB7XG4gIG5ldygpOiBhbnk7XG4gIHNlcnZpY2VfbmFtZTogc3RyaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbmplY3RvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuU2VydmljZSA9ICgodGFyZ2V0OiBJU2VydmljZUNvbnN0cnVjdG9yKSA9PiB7XG4gICAgICB0aGlzLmdldENvbnRleHQoKS5yZWdpc3Rlcih0YXJnZXQuc2VydmljZV9uYW1lLCAoKT0+bmV3IHRhcmdldCgpKTtcblxuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9KS5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy5JbmplY3QgPSAoKHJ1bnRpbWVfaWQ6IHN0cmluZykgPT4ge1xuICAgICAgcmV0dXJuICh0YXJnZXQ6IGFueSwga2V5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCB7XG4gICAgICAgICAgZ2V0OiAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRDb250ZXh0KCkucmVzb2x2ZShydW50aW1lX2lkKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogKCkgPT4ge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3Qgc2V0IGluamVjdGVkIGZpZWxkIFwiJHtrZXl9XCJgKVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSkuYmluZCh0aGlzKTtcblxuICB9XG4gIC8qKlxuICAgKiByZWdpc3RlcnMgYSBzZXJ2aWNlXG4gICAqIEBwYXJhbSB0YXJnZXRcbiAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gIHB1YmxpYyBTZXJ2aWNlOiAodGFyZ2V0OiBJU2VydmljZUNvbnN0cnVjdG9yKSA9PiBJU2VydmljZUNvbnN0cnVjdG9yO1xuXG4gIC8qKlxuICAgKiBpbmplY3RzIGRlcGVuZGVuY3kgd2l0aCBnaXZlbiBydW50aW1lIGlkIHRvIHRoZSBkZWNvcmF0ZWQgZmllbGQgb24gZmlyc3QgZ2V0XG4gICAqXG4gICAqIEBwYXJhbSBydW50aW1lX2lkXG4gICAqIEByZXR1cm5zIHtmdW5jdGlvbihhbnksIHN0cmluZyl9XG4gICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICBwdWJsaWMgSW5qZWN0OiAocnVudGltZV9pZDogc3RyaW5nKT0+KCh0YXJnZXQsIGtleSk9PnZvaWQpO1xuXG4gIHB1YmxpYyBnZXRDb250ZXh0KCk6IElDb250ZXh0IHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0O1xuICB9XG5cbiAgcHVibGljIGNyZWF0ZVRlc3RDb250ZXh0KCkge1xuICAgIHRoaXMub2xkX2NvbnRleHQgPSB0aGlzLmNvbnRleHQ7XG4gICAgdGhpcy5jb250ZXh0ID0gdGhpcy5jb250ZXh0LmNsb25lKCk7XG4gIH1cblxuICBwdWJsaWMgY2xlYXJUZXN0Q29udGV4dCgpIHtcbiAgICB0aGlzLmNvbnRleHQgPSB0aGlzLm9sZF9jb250ZXh0O1xuICB9XG5cbiAgcHJpdmF0ZSBjb250ZXh0OiBJQ29udGV4dCA9IG5ldyBDb250ZXh0KCk7XG5cbiAgcHJpdmF0ZSBvbGRfY29udGV4dDogSUNvbnRleHQ7XG59XG5cblxuZnVuY3Rpb24gaXNTdHJpbmcocyk6IHMgaXMgc3RyaW5nIHtcbiAgcmV0dXJuIHR5cGVvZiBzID09PSAnc3RyaW5nJztcbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
