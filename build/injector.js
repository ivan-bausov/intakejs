var context_1 = require("./context");
var Injector = (function () {
    function Injector() {
        this.is_test_context = false;
        this.context = new context_1["default"]();
        var self = this;
        this.Service = function (target) {
            self.getContext().register(target.service_name, function () { return new target(); });
            return target;
        };
        this.Injectable = function (runtime_id) {
            return function (target) {
                self.getContext().register(runtime_id, function () { return new target(); });
            };
        };
        this.Inject = function (runtime_id) {
            return function (target, key) {
                Object.defineProperty(target, key, {
                    get: function () {
                        return self.getContext().resolve(runtime_id);
                    },
                    set: function () {
                        throw new Error("Cannot set injected field \"" + key + "\"");
                    }
                });
            };
        };
        this.ConstructorInject = function () {
            var runtime_ids = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                runtime_ids[_i - 0] = arguments[_i];
            }
            return function (target) {
                // save a reference to the original constructor
                var original = target;
                // a utility function to generate instances of a class
                function construct(constructor, args) {
                    var c = function () {
                        return constructor.apply(this, args);
                    };
                    c.prototype = constructor.prototype;
                    return new c();
                }
                // the new constructor behaviour
                var f = function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i - 0] = arguments[_i];
                    }
                    var injected_deps = [];
                    var i = 0;
                    for (var _a = 0; _a < runtime_ids.length; _a++) {
                        var id = runtime_ids[_a];
                        if (typeof args[i] === 'undefined') {
                            injected_deps.push(self.getContext().resolve(id));
                        }
                        else {
                            injected_deps.push(args[i]);
                        }
                        i++;
                    }
                    return construct(original, injected_deps);
                };
                // copy prototype so intanceof operator still works
                f.prototype = original.prototype;
                // return new constructor (will override original)
                return f;
            };
        };
    }
    Injector.prototype.getContext = function () {
        return this.context;
    };
    Injector.prototype.mock = function (runtime_id, mock) {
        this.createTestContext();
        this.getContext().register(runtime_id, mock, true);
    };
    Injector.prototype.clearMocks = function () {
        this.clearTestContext();
    };
    Injector.prototype.createTestContext = function () {
        if (this.is_test_context) {
            return;
        }
        this.old_context = this.context;
        this.context = this.context.clone();
        this.is_test_context = true;
    };
    Injector.prototype.clearTestContext = function () {
        this.context = this.old_context;
        this.old_context = null;
        this.is_test_context = false;
    };
    return Injector;
})();
exports.__esModule = true;
exports["default"] = Injector;
function isString(s) {
    return typeof s === 'string';
}

//# sourceMappingURL=data:application/json;base64,
