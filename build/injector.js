var context_1 = require("./context");
if (!Function.prototype.bind) {
    Function.prototype.bind = function (oThis) {
        if (typeof this !== 'function') {
            // closest thing possible to the ECMAScript 5
            // internal IsCallable function
            throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
        }
        var aArgs = Array.prototype.slice.call(arguments, 1), fToBind = this, fNOP = function () { }, fBound = function () {
            return fToBind.apply(this instanceof fNOP
                ? this
                : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
        };
        if (this.prototype) {
            // Function.prototype doesn't have a prototype property
            fNOP.prototype = this.prototype;
        }
        fBound.prototype = new fNOP();
        return fBound;
    };
}
var Injector = (function () {
    function Injector() {
        var _this = this;
        this.context = new context_1["default"]();
        this.Service = (function (target) {
            _this.getContext().register(target.service_name, function () { return new target(); });
            return target;
        }).bind(this);
        this.Inject = (function (runtime_id) {
            return function (target, key) {
                Object.defineProperty(target, key, {
                    get: function () {
                        return _this.getContext().resolve(runtime_id);
                    },
                    set: function () {
                        throw new Error("Cannot set injected field \"" + key + "\"");
                    }
                });
            };
        }).bind(this);
    }
    Injector.prototype.getContext = function () {
        return this.context;
    };
    Injector.prototype.createTestContext = function () {
        this.old_context = this.context;
        this.context = this.context.clone();
    };
    Injector.prototype.clearTestContext = function () {
        this.context = this.old_context;
    };
    return Injector;
})();
exports.__esModule = true;
exports["default"] = Injector;
function isString(s) {
    return typeof s === 'string';
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluamVjdG9yLnRzIl0sIm5hbWVzIjpbIkluamVjdG9yIiwiSW5qZWN0b3IuY29uc3RydWN0b3IiLCJJbmplY3Rvci5nZXRDb250ZXh0IiwiSW5qZWN0b3IuY3JlYXRlVGVzdENvbnRleHQiLCJJbmplY3Rvci5jbGVhclRlc3RDb250ZXh0IiwiaXNTdHJpbmciXSwibWFwcGluZ3MiOiJBQUFBLHdCQUFvQixXQUFXLENBQUMsQ0FBQTtBQVFoQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM3QixRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUFTLEtBQUs7UUFDdEMsRUFBRSxDQUFDLENBQUMsT0FBTyxJQUFJLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQztZQUMvQiw2Q0FBNkM7WUFDN0MsK0JBQStCO1lBQy9CLE1BQU0sSUFBSSxTQUFTLENBQUMsc0VBQXNFLENBQUMsQ0FBQztRQUM5RixDQUFDO1FBRUQsSUFBSSxLQUFLLEdBQUssS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFDcEQsT0FBTyxHQUFHLElBQUksRUFDZCxJQUFJLEdBQU0sY0FBWSxDQUFDLEVBQ3ZCLE1BQU0sR0FBSTtZQUNSLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksWUFBWSxJQUFJO2tCQUNuQyxJQUFJO2tCQUNKLEtBQUssRUFDVCxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekQsQ0FBQyxDQUFDO1FBRUosRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDbkIsdURBQXVEO1lBQ3ZELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUNsQyxDQUFDO1FBQ0QsTUFBTSxDQUFDLFNBQVMsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBRTlCLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDaEIsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVEO0lBQ0VBO1FBREZDLGlCQXNEQ0E7UUFIU0EsWUFBT0EsR0FBYUEsSUFBSUEsb0JBQU9BLEVBQUVBLENBQUNBO1FBakR4Q0EsSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsQ0FBQ0EsVUFBQ0EsTUFBMkJBO1lBQzFDQSxLQUFJQSxDQUFDQSxVQUFVQSxFQUFFQSxDQUFDQSxRQUFRQSxDQUFDQSxNQUFNQSxDQUFDQSxZQUFZQSxFQUFFQSxjQUFJQSxPQUFBQSxJQUFJQSxNQUFNQSxFQUFFQSxFQUFaQSxDQUFZQSxDQUFDQSxDQUFDQTtZQUVsRUEsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7UUFDaEJBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBRWRBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLENBQUNBLFVBQUNBLFVBQWtCQTtZQUNoQ0EsTUFBTUEsQ0FBQ0EsVUFBQ0EsTUFBV0EsRUFBRUEsR0FBV0E7Z0JBQzlCQSxNQUFNQSxDQUFDQSxjQUFjQSxDQUFDQSxNQUFNQSxFQUFFQSxHQUFHQSxFQUFFQTtvQkFDakNBLEdBQUdBLEVBQUVBO3dCQUNIQSxNQUFNQSxDQUFDQSxLQUFJQSxDQUFDQSxVQUFVQSxFQUFFQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQTtvQkFDL0NBLENBQUNBO29CQUNEQSxHQUFHQSxFQUFFQTt3QkFDSEEsTUFBTUEsSUFBSUEsS0FBS0EsQ0FBQ0EsaUNBQThCQSxHQUFHQSxPQUFHQSxDQUFDQSxDQUFBQTtvQkFDdkRBLENBQUNBO2lCQUNGQSxDQUFDQSxDQUFDQTtZQUNMQSxDQUFDQSxDQUFBQTtRQUNIQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtJQUVoQkEsQ0FBQ0E7SUFpQk1ELDZCQUFVQSxHQUFqQkE7UUFDRUUsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7SUFDdEJBLENBQUNBO0lBRU1GLG9DQUFpQkEsR0FBeEJBO1FBQ0VHLElBQUlBLENBQUNBLFdBQVdBLEdBQUdBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBO1FBQ2hDQSxJQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtJQUN0Q0EsQ0FBQ0E7SUFFTUgsbUNBQWdCQSxHQUF2QkE7UUFDRUksSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0E7SUFDbENBLENBQUNBO0lBS0hKLGVBQUNBO0FBQURBLENBdERBLEFBc0RDQSxJQUFBO0FBdEREOzZCQXNEQyxDQUFBO0FBR0Qsa0JBQWtCLENBQUM7SUFDakJLLE1BQU1BLENBQUNBLE9BQU9BLENBQUNBLEtBQUtBLFFBQVFBLENBQUNBO0FBQy9CQSxDQUFDQSIsImZpbGUiOiJpbmplY3Rvci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb250ZXh0IGZyb20gXCIuL2NvbnRleHRcIjtcbmltcG9ydCB7SUNvbnRleHR9IGZyb20gXCIuL2NvbnRleHRcIjtcblxuZXhwb3J0IGludGVyZmFjZSBJU2VydmljZUNvbnN0cnVjdG9yIHtcbiAgbmV3KCk6IGFueTtcbiAgc2VydmljZV9uYW1lOiBzdHJpbmc7XG59XG5cbmlmICghRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQpIHtcbiAgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbihvVGhpcykge1xuICAgIGlmICh0eXBlb2YgdGhpcyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gY2xvc2VzdCB0aGluZyBwb3NzaWJsZSB0byB0aGUgRUNNQVNjcmlwdCA1XG4gICAgICAvLyBpbnRlcm5hbCBJc0NhbGxhYmxlIGZ1bmN0aW9uXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGdW5jdGlvbi5wcm90b3R5cGUuYmluZCAtIHdoYXQgaXMgdHJ5aW5nIHRvIGJlIGJvdW5kIGlzIG5vdCBjYWxsYWJsZScpO1xuICAgIH1cblxuICAgIHZhciBhQXJncyAgID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSxcbiAgICAgIGZUb0JpbmQgPSB0aGlzLFxuICAgICAgZk5PUCAgICA9IGZ1bmN0aW9uKCkge30sXG4gICAgICBmQm91bmQgID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBmVG9CaW5kLmFwcGx5KHRoaXMgaW5zdGFuY2VvZiBmTk9QXG4gICAgICAgICAgICA/IHRoaXNcbiAgICAgICAgICAgIDogb1RoaXMsXG4gICAgICAgICAgYUFyZ3MuY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgICAgIH07XG5cbiAgICBpZiAodGhpcy5wcm90b3R5cGUpIHtcbiAgICAgIC8vIEZ1bmN0aW9uLnByb3RvdHlwZSBkb2Vzbid0IGhhdmUgYSBwcm90b3R5cGUgcHJvcGVydHlcbiAgICAgIGZOT1AucHJvdG90eXBlID0gdGhpcy5wcm90b3R5cGU7XG4gICAgfVxuICAgIGZCb3VuZC5wcm90b3R5cGUgPSBuZXcgZk5PUCgpO1xuXG4gICAgcmV0dXJuIGZCb3VuZDtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5qZWN0b3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLlNlcnZpY2UgPSAoKHRhcmdldDogSVNlcnZpY2VDb25zdHJ1Y3RvcikgPT4ge1xuICAgICAgdGhpcy5nZXRDb250ZXh0KCkucmVnaXN0ZXIodGFyZ2V0LnNlcnZpY2VfbmFtZSwgKCk9Pm5ldyB0YXJnZXQoKSk7XG5cbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfSkuYmluZCh0aGlzKTtcblxuICAgIHRoaXMuSW5qZWN0ID0gKChydW50aW1lX2lkOiBzdHJpbmcpID0+IHtcbiAgICAgIHJldHVybiAodGFyZ2V0OiBhbnksIGtleTogc3RyaW5nKSA9PiB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwge1xuICAgICAgICAgIGdldDogKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29udGV4dCgpLnJlc29sdmUocnVudGltZV9pZCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6ICgpID0+IHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHNldCBpbmplY3RlZCBmaWVsZCBcIiR7a2V5fVwiYClcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pLmJpbmQodGhpcyk7XG5cbiAgfVxuICAvKipcbiAgICogcmVnaXN0ZXJzIGEgc2VydmljZVxuICAgKiBAcGFyYW0gdGFyZ2V0XG4gICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICBwdWJsaWMgU2VydmljZTogKHRhcmdldDogSVNlcnZpY2VDb25zdHJ1Y3RvcikgPT4gYW55O1xuXG4gIC8qKlxuICAgKiBpbmplY3RzIGRlcGVuZGVuY3kgd2l0aCBnaXZlbiBydW50aW1lIGlkIHRvIHRoZSBkZWNvcmF0ZWQgZmllbGQgb24gZmlyc3QgZ2V0XG4gICAqXG4gICAqIEBwYXJhbSBydW50aW1lX2lkXG4gICAqIEByZXR1cm5zIHtmdW5jdGlvbihhbnksIHN0cmluZyl9XG4gICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICBwdWJsaWMgSW5qZWN0OiAocnVudGltZV9pZDogc3RyaW5nKT0+KCh0YXJnZXQsIGtleSk9PnZvaWQpO1xuXG4gIHB1YmxpYyBnZXRDb250ZXh0KCk6IElDb250ZXh0IHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0O1xuICB9XG5cbiAgcHVibGljIGNyZWF0ZVRlc3RDb250ZXh0KCkge1xuICAgIHRoaXMub2xkX2NvbnRleHQgPSB0aGlzLmNvbnRleHQ7XG4gICAgdGhpcy5jb250ZXh0ID0gdGhpcy5jb250ZXh0LmNsb25lKCk7XG4gIH1cblxuICBwdWJsaWMgY2xlYXJUZXN0Q29udGV4dCgpIHtcbiAgICB0aGlzLmNvbnRleHQgPSB0aGlzLm9sZF9jb250ZXh0O1xuICB9XG5cbiAgcHJpdmF0ZSBjb250ZXh0OiBJQ29udGV4dCA9IG5ldyBDb250ZXh0KCk7XG5cbiAgcHJpdmF0ZSBvbGRfY29udGV4dDogSUNvbnRleHQ7XG59XG5cblxuZnVuY3Rpb24gaXNTdHJpbmcocyk6IHMgaXMgc3RyaW5nIHtcbiAgcmV0dXJuIHR5cGVvZiBzID09PSAnc3RyaW5nJztcbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
