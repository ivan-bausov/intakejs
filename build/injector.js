var context_1 = require("./context");
var Injector = (function () {
    function Injector() {
        this.context = new context_1["default"]();
        var self = this;
        this.Service = function (target) {
            self.getContext().register(target.service_name, function () { return new target(); });
            return target;
        };
        this.Injectable = function (runtime_id) {
            return function (target) {
                self.getContext().register(runtime_id, function () { return new target(); });
            };
        };
        this.Inject = function (runtime_id) {
            return function (target, key) {
                Object.defineProperty(target, key, {
                    get: function () {
                        return self.getContext().resolve(runtime_id);
                    },
                    set: function () {
                        throw new Error("Cannot set injected field \"" + key + "\"");
                    }
                });
            };
        };
    }
    Injector.prototype.getContext = function () {
        return this.context;
    };
    Injector.prototype.createTestContext = function () {
        this.old_context = this.context;
        this.context = this.context.clone();
    };
    Injector.prototype.clearTestContext = function () {
        this.context = this.old_context;
    };
    return Injector;
})();
exports.__esModule = true;
exports["default"] = Injector;
function isString(s) {
    return typeof s === 'string';
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluamVjdG9yLnRzIl0sIm5hbWVzIjpbIkluamVjdG9yIiwiSW5qZWN0b3IuY29uc3RydWN0b3IiLCJJbmplY3Rvci5nZXRDb250ZXh0IiwiSW5qZWN0b3IuY3JlYXRlVGVzdENvbnRleHQiLCJJbmplY3Rvci5jbGVhclRlc3RDb250ZXh0IiwiaXNTdHJpbmciXSwibWFwcGluZ3MiOiJBQUFBLHdCQUFvQixXQUFXLENBQUMsQ0FBQTtBQVdoQztJQUNFQTtRQWlFUUMsWUFBT0EsR0FBYUEsSUFBSUEsb0JBQU9BLEVBQUVBLENBQUNBO1FBaEV4Q0EsSUFBSUEsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFFaEJBLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLFVBQUNBLE1BQTJCQTtZQUN6Q0EsSUFBSUEsQ0FBQ0EsVUFBVUEsRUFBRUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsWUFBWUEsRUFBRUEsY0FBSUEsT0FBQUEsSUFBSUEsTUFBTUEsRUFBRUEsRUFBWkEsQ0FBWUEsQ0FBQ0EsQ0FBQ0E7WUFFbEVBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBO1FBQ2hCQSxDQUFDQSxDQUFDQTtRQUVGQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxVQUFDQSxVQUFrQkE7WUFDbkNBLE1BQU1BLENBQUNBLFVBQUNBLE1BQW9CQTtnQkFDMUJBLElBQUlBLENBQUNBLFVBQVVBLEVBQUVBLENBQUNBLFFBQVFBLENBQUNBLFVBQVVBLEVBQUVBLGNBQUlBLE9BQUFBLElBQUlBLE1BQU1BLEVBQUVBLEVBQVpBLENBQVlBLENBQUNBLENBQUNBO1lBQzNEQSxDQUFDQSxDQUFBQTtRQUNIQSxDQUFDQSxDQUFDQTtRQUVGQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxVQUFDQSxVQUFrQkE7WUFDL0JBLE1BQU1BLENBQUNBLFVBQUNBLE1BQVdBLEVBQUVBLEdBQVdBO2dCQUM5QkEsTUFBTUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsTUFBTUEsRUFBRUEsR0FBR0EsRUFBRUE7b0JBQ2pDQSxHQUFHQSxFQUFFQTt3QkFDSEEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsRUFBRUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0E7b0JBQy9DQSxDQUFDQTtvQkFDREEsR0FBR0EsRUFBRUE7d0JBQ0hBLE1BQU1BLElBQUlBLEtBQUtBLENBQUNBLGlDQUE4QkEsR0FBR0EsT0FBR0EsQ0FBQ0EsQ0FBQUE7b0JBQ3ZEQSxDQUFDQTtpQkFDRkEsQ0FBQ0EsQ0FBQ0E7WUFDTEEsQ0FBQ0EsQ0FBQUE7UUFDSEEsQ0FBQ0EsQ0FBQ0E7SUFFSkEsQ0FBQ0E7SUF3Qk1ELDZCQUFVQSxHQUFqQkE7UUFDRUUsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7SUFDdEJBLENBQUNBO0lBRU1GLG9DQUFpQkEsR0FBeEJBO1FBQ0VHLElBQUlBLENBQUNBLFdBQVdBLEdBQUdBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBO1FBQ2hDQSxJQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtJQUN0Q0EsQ0FBQ0E7SUFFTUgsbUNBQWdCQSxHQUF2QkE7UUFDRUksSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0E7SUFDbENBLENBQUNBO0lBS0hKLGVBQUNBO0FBQURBLENBckVBLEFBcUVDQSxJQUFBO0FBckVEOzZCQXFFQyxDQUFBO0FBR0Qsa0JBQWtCLENBQUM7SUFDakJLLE1BQU1BLENBQUNBLE9BQU9BLENBQUNBLEtBQUtBLFFBQVFBLENBQUNBO0FBQy9CQSxDQUFDQSIsImZpbGUiOiJpbmplY3Rvci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb250ZXh0IGZyb20gXCIuL2NvbnRleHRcIjtcbmltcG9ydCB7SUNvbnRleHR9IGZyb20gXCIuL2NvbnRleHRcIjtcblxuZXhwb3J0IGludGVyZmFjZSBJU2VydmljZUNvbnN0cnVjdG9yIGV4dGVuZHMgSUNvbnN0cnVjdG9ye1xuICBzZXJ2aWNlX25hbWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQ29uc3RydWN0b3Ige1xuICBuZXcoKTogYW55O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbmplY3RvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGxldCBzZWxmID0gdGhpcztcblxuICAgIHRoaXMuU2VydmljZSA9ICh0YXJnZXQ6IElTZXJ2aWNlQ29uc3RydWN0b3IpID0+IHtcbiAgICAgIHNlbGYuZ2V0Q29udGV4dCgpLnJlZ2lzdGVyKHRhcmdldC5zZXJ2aWNlX25hbWUsICgpPT5uZXcgdGFyZ2V0KCkpO1xuXG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH07XG5cbiAgICB0aGlzLkluamVjdGFibGUgPSAocnVudGltZV9pZDogc3RyaW5nKSA9PiB7XG4gICAgICByZXR1cm4gKHRhcmdldDogSUNvbnN0cnVjdG9yKSA9PiB7XG4gICAgICAgIHNlbGYuZ2V0Q29udGV4dCgpLnJlZ2lzdGVyKHJ1bnRpbWVfaWQsICgpPT5uZXcgdGFyZ2V0KCkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLkluamVjdCA9IChydW50aW1lX2lkOiBzdHJpbmcpID0+IHtcbiAgICAgIHJldHVybiAodGFyZ2V0OiBhbnksIGtleTogc3RyaW5nKSA9PiB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwge1xuICAgICAgICAgIGdldDogKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuZ2V0Q29udGV4dCgpLnJlc29sdmUocnVudGltZV9pZCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6ICgpID0+IHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHNldCBpbmplY3RlZCBmaWVsZCBcIiR7a2V5fVwiYClcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgfVxuICAvKipcbiAgICogcmVnaXN0ZXJzIGEgc2VydmljZVxuICAgKiBAcGFyYW0gdGFyZ2V0XG4gICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICBwdWJsaWMgU2VydmljZTogKHRhcmdldDogSVNlcnZpY2VDb25zdHJ1Y3RvcikgPT4gYW55O1xuXG4gIC8qKlxuICAgKiByZWdpc3RlcnMgaW5zdGFuY2Ugb2YgYSBjbGFzcyB3aXRoIGdpdmVuIHJ1bnRpbWUgaWRcbiAgICogQHBhcmFtIHJ1bnRpbWVfaWRcbiAgICogQHJldHVybnMge2Z1bmN0aW9uKGFueSl9XG4gICAqL1xuICBwdWJsaWMgSW5qZWN0YWJsZTogKHJ1bnRpbWVfaWQ6IHN0cmluZykgPT4gKHRhcmdldDogSUNvbnN0cnVjdG9yKT0+YW55O1xuXG4gIC8qKlxuICAgKiBpbmplY3RzIGRlcGVuZGVuY3kgd2l0aCBnaXZlbiBydW50aW1lIGlkIHRvIHRoZSBkZWNvcmF0ZWQgZmllbGQgb24gZmlyc3QgZ2V0XG4gICAqXG4gICAqIEBwYXJhbSBydW50aW1lX2lkXG4gICAqIEByZXR1cm5zIHtmdW5jdGlvbihhbnksIHN0cmluZyl9XG4gICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICBwdWJsaWMgSW5qZWN0OiAocnVudGltZV9pZDogc3RyaW5nKT0+KCh0YXJnZXQsIGtleSk9PnZvaWQpO1xuXG4gIHB1YmxpYyBnZXRDb250ZXh0KCk6IElDb250ZXh0IHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0O1xuICB9XG5cbiAgcHVibGljIGNyZWF0ZVRlc3RDb250ZXh0KCkge1xuICAgIHRoaXMub2xkX2NvbnRleHQgPSB0aGlzLmNvbnRleHQ7XG4gICAgdGhpcy5jb250ZXh0ID0gdGhpcy5jb250ZXh0LmNsb25lKCk7XG4gIH1cblxuICBwdWJsaWMgY2xlYXJUZXN0Q29udGV4dCgpIHtcbiAgICB0aGlzLmNvbnRleHQgPSB0aGlzLm9sZF9jb250ZXh0O1xuICB9XG5cbiAgcHJpdmF0ZSBjb250ZXh0OiBJQ29udGV4dCA9IG5ldyBDb250ZXh0KCk7XG5cbiAgcHJpdmF0ZSBvbGRfY29udGV4dDogSUNvbnRleHQ7XG59XG5cblxuZnVuY3Rpb24gaXNTdHJpbmcocyk6IHMgaXMgc3RyaW5nIHtcbiAgcmV0dXJuIHR5cGVvZiBzID09PSAnc3RyaW5nJztcbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
