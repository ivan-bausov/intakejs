var Context = (function () {
    function Context() {
        this.map = {};
    }
    /**
     * Saves instance with given id in context. If second argument is InstanceCreator, actual instance would be
     * instantiated on first resolve.
     *
     * @param runtime_id
     * @param instance
     * @param force
       */
    Context.prototype.register = function (runtime_id, instance, force) {
        if (force === void 0) { force = false; }
        if (this.map[runtime_id] && !force) {
            throw new Error("Instance with id \"" + runtime_id + "\" is already registered");
        }
        this.map[runtime_id] = {
            instance: isCreator(instance) ? null : instance,
            creator: isCreator(instance) ? instance : null
        };
    };
    /**
     * Returns previously registered instance for given key. If instance was never created, throws error.
     * @param runtime_id
     */
    Context.prototype.resolve = function (runtime_id) {
        var data = this.map[runtime_id];
        if (!data) {
            throw new Error("Instance with id " + runtime_id + " not found");
        }
        if (data.creator) {
            data.instance = data.creator();
            data.creator = null;
        }
        return data.instance;
    };
    /**
     * Removes all previously registered instances from context
     */
    Context.prototype.clear = function () {
        this.map = {};
    };
    /**
     * Copies all state of current context to newly created one
     * @returns {IContext}
       */
    Context.prototype.clone = function () {
        var ctx = new Context();
        for (var name_1 in this.map) {
            if (this.map.hasOwnProperty(name_1)) {
                ctx.map[name_1] = this.map[name_1];
            }
        }
        return ctx;
    };
    return Context;
})();
exports.__esModule = true;
exports["default"] = Context;
function isCreator(obj) {
    return typeof obj === 'function';
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRleHQudHMiXSwibmFtZXMiOlsiQ29udGV4dCIsIkNvbnRleHQuY29uc3RydWN0b3IiLCJDb250ZXh0LnJlZ2lzdGVyIiwiQ29udGV4dC5yZXNvbHZlIiwiQ29udGV4dC5jbGVhciIsIkNvbnRleHQuY2xvbmUiLCJpc0NyZWF0b3IiXSwibWFwcGluZ3MiOiJBQVdBO0lBQUFBO1FBd0RVQyxRQUFHQSxHQUVQQSxFQUFFQSxDQUFDQTtJQUNUQSxDQUFDQTtJQTFEQ0Q7Ozs7Ozs7U0FPS0E7SUFDTEEsMEJBQVFBLEdBQVJBLFVBQVlBLFVBQWtCQSxFQUFFQSxRQUFnQ0EsRUFBRUEsS0FBc0JBO1FBQXRCRSxxQkFBc0JBLEdBQXRCQSxhQUFzQkE7UUFDdEZBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBO1lBQ25DQSxNQUFNQSxJQUFJQSxLQUFLQSxDQUFDQSx3QkFBcUJBLFVBQVVBLDZCQUF5QkEsQ0FBQ0EsQ0FBQ0E7UUFDNUVBLENBQUNBO1FBQ0RBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLFVBQVVBLENBQUNBLEdBQUdBO1lBQ3JCQSxRQUFRQSxFQUFFQSxTQUFTQSxDQUFDQSxRQUFRQSxDQUFDQSxHQUFHQSxJQUFJQSxHQUFHQSxRQUFRQTtZQUMvQ0EsT0FBT0EsRUFBRUEsU0FBU0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsR0FBR0EsUUFBUUEsR0FBR0EsSUFBSUE7U0FDL0NBLENBQUNBO0lBQ0pBLENBQUNBO0lBRURGOzs7T0FHR0E7SUFDSEEseUJBQU9BLEdBQVBBLFVBQVdBLFVBQWtCQTtRQUMzQkcsSUFBSUEsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0E7UUFDaENBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO1lBQ1ZBLE1BQU1BLElBQUlBLEtBQUtBLENBQUNBLHNCQUFvQkEsVUFBVUEsZUFBWUEsQ0FBQ0EsQ0FBQ0E7UUFDOURBLENBQUNBO1FBQ0RBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBO1lBQ2pCQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxJQUFJQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtZQUMvQkEsSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFDdEJBLENBQUNBO1FBQ0RBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBO0lBQ3ZCQSxDQUFDQTtJQUVESDs7T0FFR0E7SUFDSEEsdUJBQUtBLEdBQUxBO1FBQ0VJLElBQUlBLENBQUNBLEdBQUdBLEdBQUdBLEVBQUVBLENBQUNBO0lBQ2hCQSxDQUFDQTtJQUVESjs7O1NBR0tBO0lBQ0xBLHVCQUFLQSxHQUFMQTtRQUNFSyxJQUFJQSxHQUFHQSxHQUFHQSxJQUFJQSxPQUFPQSxFQUFFQSxDQUFDQTtRQUN4QkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsTUFBSUEsSUFBSUEsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDMUJBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLGNBQWNBLENBQUNBLE1BQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUNsQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsTUFBSUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsTUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDakNBLENBQUNBO1FBQ0hBLENBQUNBO1FBQ0RBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBO0lBQ2JBLENBQUNBO0lBS0hMLGNBQUNBO0FBQURBLENBM0RBLEFBMkRDQSxJQUFBO0FBM0REOzRCQTJEQyxDQUFBO0FBRUQsbUJBQW1CLEdBQVE7SUFDekJNLE1BQU1BLENBQUNBLE9BQU9BLEdBQUdBLEtBQUtBLFVBQVVBLENBQUNBO0FBQ25DQSxDQUFDQSIsImZpbGUiOiJjb250ZXh0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGludGVyZmFjZSBJbnN0YW5jZUNyZWF0b3I8VD4ge1xuICAoKTogVDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQ29udGV4dCB7XG4gIHJlZ2lzdGVyPFQ+KHJ1bnRpbWVfaWQ6IHN0cmluZywgaW5zdGFuY2U6IFQgfCBJbnN0YW5jZUNyZWF0b3I8VD4sIGZvcmNlPzogYm9vbGVhbik7XG4gIHJlc29sdmU8VD4ocnVudGltZV9pZDogc3RyaW5nKTogVDtcbiAgY2xvbmUoKTogSUNvbnRleHQ7XG4gIGNsZWFyKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRleHQgaW1wbGVtZW50cyBJQ29udGV4dCB7XG4gIC8qKlxuICAgKiBTYXZlcyBpbnN0YW5jZSB3aXRoIGdpdmVuIGlkIGluIGNvbnRleHQuIElmIHNlY29uZCBhcmd1bWVudCBpcyBJbnN0YW5jZUNyZWF0b3IsIGFjdHVhbCBpbnN0YW5jZSB3b3VsZCBiZVxuICAgKiBpbnN0YW50aWF0ZWQgb24gZmlyc3QgcmVzb2x2ZS5cbiAgICpcbiAgICogQHBhcmFtIHJ1bnRpbWVfaWRcbiAgICogQHBhcmFtIGluc3RhbmNlXG4gICAqIEBwYXJhbSBmb3JjZVxuICAgICAqL1xuICByZWdpc3RlcjxUPihydW50aW1lX2lkOiBzdHJpbmcsIGluc3RhbmNlOiBUIHwgSW5zdGFuY2VDcmVhdG9yPFQ+LCBmb3JjZTogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgaWYgKHRoaXMubWFwW3J1bnRpbWVfaWRdICYmICFmb3JjZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnN0YW5jZSB3aXRoIGlkIFwiJHtydW50aW1lX2lkfVwiIGlzIGFscmVhZHkgcmVnaXN0ZXJlZGApO1xuICAgIH1cbiAgICB0aGlzLm1hcFtydW50aW1lX2lkXSA9IHtcbiAgICAgIGluc3RhbmNlOiBpc0NyZWF0b3IoaW5zdGFuY2UpID8gbnVsbCA6IGluc3RhbmNlLFxuICAgICAgY3JlYXRvcjogaXNDcmVhdG9yKGluc3RhbmNlKSA/IGluc3RhbmNlIDogbnVsbFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgaW5zdGFuY2UgZm9yIGdpdmVuIGtleS4gSWYgaW5zdGFuY2Ugd2FzIG5ldmVyIGNyZWF0ZWQsIHRocm93cyBlcnJvci5cbiAgICogQHBhcmFtIHJ1bnRpbWVfaWRcbiAgICovXG4gIHJlc29sdmU8VD4ocnVudGltZV9pZDogc3RyaW5nKTogVCB7XG4gICAgdmFyIGRhdGEgPSB0aGlzLm1hcFtydW50aW1lX2lkXTtcbiAgICBpZiAoIWRhdGEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSW5zdGFuY2Ugd2l0aCBpZCAke3J1bnRpbWVfaWR9IG5vdCBmb3VuZGApO1xuICAgIH1cbiAgICBpZiAoZGF0YS5jcmVhdG9yKSB7XG4gICAgICBkYXRhLmluc3RhbmNlID0gZGF0YS5jcmVhdG9yKCk7XG4gICAgICBkYXRhLmNyZWF0b3IgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YS5pbnN0YW5jZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFsbCBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgaW5zdGFuY2VzIGZyb20gY29udGV4dFxuICAgKi9cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5tYXAgPSB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb3BpZXMgYWxsIHN0YXRlIG9mIGN1cnJlbnQgY29udGV4dCB0byBuZXdseSBjcmVhdGVkIG9uZVxuICAgKiBAcmV0dXJucyB7SUNvbnRleHR9XG4gICAgICovXG4gIGNsb25lKCk6IElDb250ZXh0IHtcbiAgICB2YXIgY3R4ID0gbmV3IENvbnRleHQoKTtcbiAgICBmb3IgKGxldCBuYW1lIGluIHRoaXMubWFwKSB7XG4gICAgICBpZiAodGhpcy5tYXAuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgY3R4Lm1hcFtuYW1lXSA9IHRoaXMubWFwW25hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY3R4O1xuICB9XG5cbiAgcHJpdmF0ZSBtYXAgOiB7XG4gICAgW2tleTogc3RyaW5nXTogUnVudGltZURhdGE8YW55PjtcbiAgfSA9IHt9O1xufVxuXG5mdW5jdGlvbiBpc0NyZWF0b3Iob2JqOiBhbnkpIDogb2JqIGlzIEluc3RhbmNlQ3JlYXRvcjxhbnk+IHtcbiAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbic7XG59XG5cbmludGVyZmFjZSBSdW50aW1lRGF0YTxUPiB7XG4gIGluc3RhbmNlOiBUO1xuICBjcmVhdG9yOiBJbnN0YW5jZUNyZWF0b3I8VD47XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
